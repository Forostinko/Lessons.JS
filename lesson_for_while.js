//                         УРОК ОТ 09/20
//======================================================================
//                          WHILE LOOP
//======================================================================
// Выполнит только если верное условие. Если условие будет не верное, код не сработает. Этим отличается от do while

//Syntax:

//while (condition) {
//code block
//}

//Начать с меньшего числа и идти к большему
// let i = 0
// while (i < 3) {          //условие верное
//   console.log(i);
//   i++
// }

// let i = 0
// while (i > 3) {           //условие не верное, код не сработает
//   console.log(i);
//   i++
// }

//Начать с большего числа и идти к меньшему
// let j = 7
// while (j != 0) {
//   console.log(j);
//   j--
// }

//Если выводим console за пределы loop то выводит 0
// let j = 7
// while (j != 0) {
//   j--
// }
// console.log(j);


//Например: нам нужно пробежаться по массиву и вывести все элементы массива
// const fruits = ['apple', 'pears', 'plums', 'grape']
// let index = 0
// while ( index < fruits.length) {
//   console.log(fruits [index])
//   index++
// }

//                        DO .... WHILE
//===================================================================
//отличается от while тем, что даже если условие не верное он один раз выполнит его.

// do {
//   //code block
// } while (condition);

//Этот пример говорит: ты начал с 58 и куда ты там пришел в 68 - я не знаю.
// let k = 0;
// do {
//   console.log ( k );
//   k++
// } while ( k > 3)

//ПРимер: будет запрашивать цифры, до тех пор пока  условие не нарушится (введем -4 например)
//parseInt превращает строку в число. 
//Если убрать parseInt, то он просто выведит все цифры подряд,которые я ввожу и не будет выводить никаких математических операций.
//prompt в Visual code не работает. Нужно создат папку с html (щтвечает за наполнение страницы) и скопировать с replit

// let sum = 0;
// let number = 0;

// do {
//   sum += number;
//   number = parseInt ( prompt('Enter a number'));
// } while ( number >= 0)

// document.write (`The sum is ${sum}.`);


//                            BREAK
//======================================================================
//Директива break ==> полностью прекращает выполнение цикла.



// === в данном случае строгое значение
//будет 7
// for (let i = 0; i <= 10; i++) {
//   if ( i === 7) break;            
//   console.log (i);
// }

// === в данном случае НЕ строгое значение
//когда i стало =7  break уже не выполняет это. будет 6
// for (let i = 0; i <= 10; i++) {
//   if ( i == 7) break;            
//   console.log (i);
// }

// for ( let i = 0; i <= 10; i++) {
//   if ( i % 2 == 0) continue;
//   console.log (i)
// }


//                          CONTINUE
//======================================================================
//Continue ==> прерывает текущую итерацию циклов и продолжает выполнение со следующей итерации

//Пропустить каждое четное число и продолжай
// for (let i =0; i <= 10; i++) {
//   if ( i % 2 == 0) continue;
//   console.log (i);
// }
// остаток от деления
//  i % 2 это значит 2 / 2 = 0,  4 / 2 = 2 и т.д


//               TERNARY OPERATOR - Тернальный оператор

// Записывание if в одну строчку называется - Тернальный оператор.

//                       if
//                если верно, то ->
//                       |
// тут мое условие()     |
//                       |          сделай это
//      |                |                |
// условие ?      выражение 1 :    выражение 2   
//                            |           |
//                            |        сделай это
//                       else ->

//                       если нет, то
// let a = 7

// ( a > 5 ) ? console.log (a) : continue


//Нельзя использовать break/continue справа от оператора "?" ( тернальный оператор - ternary operator)
//syntax:
//условие ? выражение 1: выражение 2

// let a = 7;
// (a > 5) ? console.log (a) : console log ("Hi");

// let a = 7;
// (a > 5) ? console.log (a) : continue;


//                         INNER LOOP
//======================================================================
//чтобы так не писать
// console.log (1)
// console.log (1)
// console.log (1)
// console.log (1)
//мы пишем
// for (let i = 1; i <= 5; i++) {
//   console.log (i)
// }


// 1         //line == 1
// 12        //line == 2
// 123       //line == 3
// 1234      //line == 4
// 12345     //line == 5

//1й способ:
// let str = "";
// for (let line = 1; line <= 5; line ++) {
//     str = str + line
//   console.log (str);
// }

// 2й способ: с помощь loop
// for (let line = 1; line <= 5; line ++) {
//   let str = "",
//     for (let numInLine = 1; numInLine <= line; numInLine ++) {
//     str = str + numInLine;
//     }
//   console.log (str);
// }


//12345
//1234
//123
//12
//1
// for (let i = 5; i >= 1; i--) {     //1й loop отвечает за кол-во строк
//   let str = "";
//   for (let j = 1; j <= i; j++) {   //2й loop отвечаете за выполнение строки
//если хотим просто в строчке вывести то меняем j. Н-р j < = 7
//     str = str +j;
//   }
//   console.log (str);
// 


//========как достать элемент из вложенного массива

//let arr =[1, ["a", 'b', [5, 7]], 3, "Hello"]
//          0 ----------1-------   2     3
//               0    1   ---2---    внутри элемента
//                         0   1
                         
// console.log(arr[0])          //[] пишем индекс того элемента к которому хотим обратиться

// console.log(typeof arr[3])      //string
// console.log(arr[3] [2])         //r

//если хотим обратиться к 1(а) то [0]
// к 7  то console.log(arr[1] [2] [1])  
// к l  то console.log(arr[3] [2]) 

//=======как проверить массив
// let arr2 = []
// if (arr2.length == 0) {
//   console.log ("it's empty")
// }

